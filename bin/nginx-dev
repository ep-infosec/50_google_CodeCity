#!/bin/bash

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Create configuration files for and then start nginx, for use as a
# local development server.  nginx is configured to run in the
# foreground, and to store all runtime data in <repository root>/var,
# rather than in /var/ or /usr/local/var/ as it might normally.
#
# This is done by generating var/nginx-dev.conf, which will include
# var/cc-localhost.conf, which is copied (with edits) from
# etc/cc-localhost.conf, then starting nginx specifying
# var/nginx-dev.conf as the config file to use.

set -e

# Get top level directory of the CodeCity git repository.  It's the
# parent directory of the directory containing this script.
readonly repo="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. >/dev/null 2>&1 && pwd)"

# Create var directory if required
if [[ ! -d "${repo}/var" ]] ; then
  if [[ -x "${repo}/var" ]] ; then
    echo "${repo}/var already exists and is not a directory" 1>&2
    exit 1
  fi

  mkdir "${repo}/var"
fi

# Find location where the nginx installation keeps its config files.
# We only want the mime.types file.
dirs=(/usr/local/etc /etc/opt /etc)
if type brew >/dev/null 2>&1 ; then  # Homebrew in path?
  dirs=("$(brew --prefix)/etc" "${dirs[@]}")
fi
for dir in "${dirs[@]}"; do
  if [[ -d "${dir}" && -f "${dir}/nginx/mime.types" ]] ; then
    readonly mimetypes="${dir}/nginx/mime.types"
    break;
  fi
done

if [[ -z "${mimetypes}" ]] ; then
  echo "$0: can't find mime.types file." 1>&2
  exit 1;
fi

cat >"$repo/var/nginx-dev.conf" <<EOF
# Auto-generated by bin/nginx-dev.  Do not edit.

daemon off;
worker_processes  1;

# Set pidfile and logfile paths to be in $repo/var:
pid $repo/var/nginx.pid;
error_log $repo/var/error.log;

events {
}

http {
  access_log off;
  include ${mimetypes};
  default_type application/octet-stream;

  # Set temp paths to be in $repo/var:
  client_body_temp_path $repo/var/client_temp;
  fastcgi_temp_path $repo/var/fastcgi_temp;
  proxy_temp_path $repo/var/proxy_temp;
  scgi_temp_path $repo/var/scgi_temp;
  uwsgi_temp_path $repo/var/uwsgi_temp;

  include ${repo}/var/cc-localhost.conf;
}
EOF

readonly repo_escaped=${repo//\//\\/}
sed -e "s/REPOSITORY/${repo_escaped}/g" ${repo}/etc/cc-localhost.conf \
    > ${repo}/var/cc-localhost.conf
nginx -c "$repo/var/nginx-dev.conf"
