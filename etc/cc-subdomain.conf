# Nginx configuration for Code City using multiple subdomains.

# Configuration applying to all servers.
# Replace INSTANCENAME with the domain name of your instance; make
# sure the result is prefixed with the 'static' subdomain.
# E.g.: static.example.codecity.world
error_page 502 503 504 =503 https://static.INSTANCENAME/503.html;

# Configuration applying to all proxy forwarding.
proxy_set_header Host $http_host;
proxy_set_header Forwarded $proxy_add_forwarded;  # See below.
proxy_set_header CodeCity-pathToSubdomain "?0";
proxy_pass_header Server;
proxy_next_upstream_tries 1;
proxy_max_temp_file_size 0;
proxy_connect_timeout 10s;
proxy_send_timeout 10s;
proxy_read_timeout 10s;

# Redirect all http traffic to https.
server {
  # Listen on port 80 for both IPv6 and IPv4.
  listen [::]:80 ipv6only=off;
  return 301 https://$host$request_uri;
}

# Code City configuration
server {
  # Listen on port 443 for both IPv6 and IPv4.
  listen [::]:443 ssl ipv6only=off;

  # Replace INSTANCENAME with the domain name of your instance.  Make
  # sure that the resulting filenames point at the certificate files
  # created by certbot.
  ssl_certificate /etc/letsencrypt/live/INSTANCENAME/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/INSTANCENAME/privkey.pem;

  # # Canonicalise to a single domain.
  # #
  # # Replace regular expression with one that matches all non-canonical
  # # domains.
  # if ( $host ~ ^example\.codecity\.(academy|games)$ ) {
  #   # Replace INSTANCENAME with the canonical domain name of your instance.
  #   # E.g.: https://example.codecity.world$request_uri
  #   return 301 https://INSTANCENAME$request_uri;
  # }
  # # Replace regular expression with one that matches all non-canonical
  # # subdomains.
  # if ( $host ~ ^(.*)\.example\.codecity\.(academy|games)$ ) {
  #   # Replace INSTANCENAME with the canonical domain name of your instance.
  #   # E.g.: https://$1.example.codecity.world$request_uri
  #   return 301 https://$1.INSTANCENAME$request_uri;
  # }

  location / {
    # Proxy to Code City port 7780.
    proxy_pass http://127.0.0.1:7780/;
  }
}

# Login server.
server {
  listen [::]:443 ssl;

  # Replace INSTANCENAME with the domain name of your instance; make
  # sure the result is prefixed with the 'login' subdomain.
  # E.g.: login.example.codecity.world
  server_name login.INSTANCENAME;

  location / {
    # Proxy to loginServer.js port 7781.
    proxy_pass http://127.0.0.1:7781/;
  }
}

# Connect server.
server {
  listen [::]:443 ssl;

  # Replace INSTANCENAME with the domain name of your instance; make
  # sure the result is prefixed with the 'connect' subdomain.
  # E.g.: connect.example.codecity.world
  server_name connect.INSTANCENAME;

  location / {
    # Proxy to connectServer.js port 7782.
    proxy_pass http://127.0.0.1:7782/;
  }
}

# MobWrite server.
server {
  listen [::]:443 ssl;

  # Replace INSTANCENAME with the domain name of your instance; make
  # sure the result is prefixed with the 'mobwrite' subdomain.
  # E.g.: mobwrite.example.codecity.world
  server_name mobwrite.INSTANCENAME;

  location / {
    # Proxy to mobwrite_server.py port 7783.
    proxy_pass http://127.0.0.1:7783/mobwrite;
  }
}

# Static file server.
server {
  listen [::]:443 ssl;

  # Replace INSTANCENAME with the domain name of your instance; make
  # sure the result is prefixed with the 'static' subdomain.
  # E.g.: static.example.codecity.world
  server_name static.INSTANCENAME;

  location / {
    autoindex on;
    index index.html;
    # If required, edit to be full path to CodeCity static directory.
    # E.g. /home/codecity/CodeCity/static
    root /home/codecity/CodeCity/static;
  }
}

# Configuration for generating Forwarded: header, based on example from
# https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/
#
# Conceal the IP address of incoming connections by default, as it is
# PII and we try to avoid giving users any chance to get their hands
# on each other's PII.  To enable inclusion of actual IP addresses of
# incoming connections in the Forwarded header, uncomment the first
# two matchers below.
map $remote_addr $proxy_forwarded_for {
    # IPv4 addresses can be sent as-is.
#    ~^[0-9.]+$          "for=$remote_addr"

    # IPv6 addresses need to be bracketed and quoted.
#    ~^[0-9A-Fa-f:.]+$   "for=\"[$remote_addr]\"";

    # Unix domain socket names cannot be represented in RFC 7239 syntax.
    default             "for=unknown";
}

# Append host and proto.
map $proxy_forwarded_for $proxy_forwarded_elem {
    default "$proxy_forwarded_for;host=\"$http_host\";proto=$scheme";
}

map $http_forwarded $proxy_add_forwarded {
    # If the incoming Forwarded header is syntactically valid, append to it.
    "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

    # Otherwise, replace it.
    default "$proxy_forwarded_elem";
}

